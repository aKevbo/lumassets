"use strict";SharkGame.Save={saveFileName:"sharkGameSave",saveGame(){let e="";const a={version:SharkGame.VERSION,resources:{},tabs:{},completedRequirements:{},world:{type:world.worldType},aspects:{},gateway:{betweenRuns:SharkGame.gameOver,wonGame:SharkGame.wonGame}};SharkGame.PlayerResources.forEach(((e,t)=>{(e.amount>0||e.totalAmount>0)&&(a.resources[t]={amount:e.amount,totalAmount:e.totalAmount})})),a.upgrades=_.cloneDeep(SharkGame.Upgrades.purchased),_.each(SharkGame.Aspects,(({level:e},t)=>{e&&(a.aspects[t]=e)})),$.each(SharkGame.Tabs,((e,t)=>{"current"!==e?a.tabs[e]=[t.discovered,t.seen]:a.tabs.current=t})),a.completedRequirements=_.cloneDeep(SharkGame.Gate.completedRequirements),a.settings=_.cloneDeep(SharkGame.Settings.current),a.completedWorlds=_.cloneDeep(SharkGame.Gateway.completedWorlds),a.flags=_.cloneDeep(SharkGame.flags),a.persistentFlags=_.cloneDeep(SharkGame.persistentFlags),a.planetPool=_.cloneDeep(gateway.planetPool),a.keybinds=SharkGame.Keybinds.keybinds,a.timestampLastSave=_.now(),a.timestampGameStart=SharkGame.timestampGameStart,a.timestampRunStart=SharkGame.timestampRunStart,a.timestampRunEnd=SharkGame.timestampRunEnd,a.saveVersion=SharkGame.Save.saveUpdaters.length-1,e=ascii85.encode(pako.deflate(JSON.stringify(a),{to:"string"}));try{if(void 0===e||"<~~>"===e)throw new Error("Something went wrong while saving");localStorage.setItem(SharkGame.Save.saveFileName,e)}catch(e){throw new Error("Couldn't save to local storage. Reason: "+e.message)}return e},decodeSave(e){if("<~"===e.substring(0,2))try{e=ascii85.decode(e)}catch(a){throw new Error("Saved data looked like it was encoded in ascii85, but it couldn't be decoded. Can't load. Your save: "+e)}if("x"===e.charAt(0))try{e=pako.inflate(e,{to:"string"})}catch(a){throw new Error("Saved data is compressed, but it can't be decompressed. Can't load. Your save: "+e)}if("{"===e.charAt(0))try{return JSON.parse(e)}catch(a){throw new Error("Couldn't load save data. It didn't parse correctly. Your save: "+e)}},loadGame(e){let a;const t=e||localStorage.getItem(SharkGame.Save.saveFileName);if(!t)throw new Error("Tried to load game, but no game to load.");if("string"!=typeof t)throw new Error("Tried to load game, but save wasn't a string.");if(a=this.decodeSave(t),!a)throw new Error("Couldn't load saved game. I don't know how to break this to you, but I think your save is corrupted. Your save: "+t);{const e=SharkGame.Save.saveUpdaters.length-1;if(_.has(a,"saveVersion")){if("number"!=typeof a.saveVersion||a.saveVersion<=12)throw new Error("This is a save from before New Frontiers 0.2, after which the save system was changed.");15!==a.saveVersion&&16!==a.saveVersion||(SharkGame.missingAspects=!0)}else a=SharkGame.Save.saveUpdaters[0](a);if(a.saveVersion<e){for(let t=a.saveVersion+1;t<=e;t++){a=(0,SharkGame.Save.saveUpdaters[t])(a),a.saveVersion=t}log.addMessage("Updated save data from v "+a.version+" to "+SharkGame.VERSION+".")}const t=_.now();if("number"!=typeof a.timestampLastSave&&(a.timestampLastSave=t),"number"!=typeof a.timestampGameStart&&(a.timestampGameStart=t),"number"!=typeof a.timestampRunStart&&(a.timestampRunStart=t),"number"!=typeof a.timestampRunEnd&&(a.timestampRunEnd=t),SharkGame.timestampLastSave=a.timestampLastSave,SharkGame.timestampGameStart=a.timestampGameStart,SharkGame.timestampRunStart=a.timestampRunStart,SharkGame.timestampRunEnd=a.timestampRunEnd,SharkGame.timestampSimulated=a.timestampLastSave,SharkGame.flags=a.flags?a.flags:{},SharkGame.persistentFlags=a.persistentFlags?a.persistentFlags:{},$.each(a.resources,((e,a)=>{SharkGame.PlayerResources.has(e)&&(SharkGame.PlayerResources.get(e).amount=isNaN(a.amount)?0:a.amount,SharkGame.PlayerResources.get(e).totalAmount=isNaN(a.totalAmount)?0:a.totalAmount)})),a.world&&(Object.keys(SharkGame.WorldTypes).includes(a.world.type)?world.worldType=a.world.type:(world.worldType="start",gateway.badWorld=!0)),SharkGame.Upgrades.purchaseQueue=[],_.each(a.upgrades,(e=>{SharkGame.Upgrades.purchaseQueue.push(e)})),_.some(a.aspects,((e,a)=>!_.has(SharkGame.Aspects,a)))&&(SharkGame.missingAspects=!0),$.each(a.aspects,((e,a)=>{_.has(SharkGame.Aspects,e)&&(SharkGame.Aspects[e].level=a)})),_.each(a.completedWorlds,(e=>{gateway.markWorldCompleted(e)})),a.tabs&&a.tabs.home&&("object"==typeof a.tabs.home?$.each(a.tabs,((e,a)=>{_.has(SharkGame.Tabs,e)&&"current"!==e&&(SharkGame.Tabs[e].discovered=a[0],SharkGame.Tabs[e].seen=a[1])})):$.each(a.tabs,((e,a)=>{_.has(SharkGame.Tabs,e)&&"current"!==e&&(SharkGame.Tabs[e].discovered=a,SharkGame.Tabs[e].seen=!0)}))),a.tabs&&a.tabs.current&&(SharkGame.Tabs.current=a.tabs.current),a.completedRequirements&&(SharkGame.Gate.completedRequirements=_.cloneDeep(a.completedRequirements)),a.planetPool&&(gateway.planetPool=a.planetPool),$.each(a.settings,((e,a)=>{SharkGame.Settings.current[e]=a,SharkGame.Settings[e]&&"function"==typeof SharkGame.Settings[e].onChange&&SharkGame.Settings[e].onChange()})),a.gateway&&("boolean"==typeof a.gateway.wonGame&&(SharkGame.wonGame=a.gateway.wonGame),"boolean"==typeof a.gateway.betweenRuns&&(SharkGame.gameOver=a.gateway.betweenRuns)),!SharkGame.gameOver){let e=(_.now()-a.timestampLastSave)/1e3;e<0?e=0:SharkGame.flags.needOfflineProgress=e}a.keybinds&&(SharkGame.Keybinds.keybinds=a.keybinds)}},importData(e){try{main.wipeGame(),SharkGame.Save.loadGame(e),main.setUpGame()}catch(e){log.addError(e)}SharkGame.TabHandler.setUpTab()},exportData(){let e;try{e=SharkGame.Save.saveGame()}catch(e){log.addError(e)}return"<~"!==e.substring(0,2)&&(e=ascii85.encode(e)),e},savedGameExists:(e="")=>null!==localStorage.getItem(SharkGame.Save.saveFileName+e),deleteSave(e=""){localStorage.removeItem(SharkGame.Save.saveFileName+e)},getTaggedSaveCharacteristics(e){if(_.isUndefined(e))throw SharkGame.Log.addError("Tried to get characteristics of a tagged save, but no tag was given."),new Error("Tried to get characteristics of a tagged save, but no tag was given.");const a=this.decodeSave(localStorage.getItem(SharkGame.Save.saveFileName+e));let t;if(!a)throw SharkGame.Log.addError(`Tried to get characteristics of ${SharkGame.Save.saveFileName+e}, but no such save exists.`),new Error(`Tried to get characteristics of ${SharkGame.Save.saveFileName+e}, but no such save exists.`);return t=` from ${SharkGame.TextUtil.formatTime(_.now()-a.timestampLastSave)} ago`,a.resources.essence&&(t+=` with ${a.resources.essence.totalAmount||0} lifetime essence`),t},createTaggedSave(e){if(_.isUndefined(e))throw SharkGame.Log.addError("Tried to create a tagged save, but no tag was given."),new Error("Tried to create a tagged save, but no tag was given.");localStorage.setItem(SharkGame.Save.saveFileName+e,localStorage.getItem(SharkGame.Save.saveFileName))},loadTaggedSave(e){if(_.isUndefined(e))throw SharkGame.Log.addError("Tried to load a tagged save, but no tag was given."),new Error("Tried to load a tagged save, but no tag was given.");this.savedGameExists(e)?this.importData(localStorage.getItem(SharkGame.Save.saveFileName+e)):SharkGame.Log.addError(`Tried to load ${SharkGame.Save.saveFileName+e}, but no such save exists.`)},wipeSave(){this.createTaggedSave("Backup"),this.deleteSave()},saveUpdaters:[function(e){return e.saveVersion=0,e.version=null,e.timestamp=null,e.resources={},["essence","shark","ray","crab","scientist","nurse","laser","maker","planter","brood","crystalMiner","autoTransmuter","fishMachine","science","fish","sand","crystal","kelp","seaApple","sharkonium"].forEach((a=>e.resources[a]={amount:null,totalAmount:null})),e.upgrades={},["crystalBite","crystalSpade","crystalContainer","underwaterChemistry","seabedGeology","thermalVents","laserRays","automation","engineering","kelpHorticulture","xenobiology","biology","rayBiology","crabBiology","sunObservation","transmutation","exploration","farExploration","gateDiscovery"].forEach((a=>e.upgrades[a]=null)),e.tabs={current:"home",home:{discovered:!0},lab:{discovered:!1},gate:{discovered:!1}},e.settings={buyAmount:1,offlineModeActive:!0,autosaveFrequency:5,logMessageMax:15,sidebarWidth:"25%",showAnimations:!0,colorCosts:!0},e.gateCostsMet={fish:!1,sand:!1,crystal:!1,kelp:!1,seaApple:!1,sharkonium:!1},e},function(e){return(e=$.extend(!0,e,{resources:{sandDigger:{amount:0,totalAmount:0},junk:{amount:0,totalAmount:0}},upgrades:{statsDiscovery:null,recyclerDiscovery:null},settings:{showTabHelp:!0,groupResources:!0},timestampLastSave:e.timestamp,timestampGameStart:null,timestampRunStart:null})).tabs={current:e.tabs.current,home:e.tabs.home.discovered,lab:e.tabs.lab.discovered,gate:e.tabs.gate.discovered,stats:!1,recycler:!1},delete e.timestamp,e},function(e){return e=$.extend(!0,e,{settings:{iconPositions:"top"}})},function(e){return e=$.extend(!0,e,{settings:{showTabImages:!0},tabs:{reflection:!1},timestampRunEnd:null}),_.each(["shrimp","lobster","dolphin","whale","chimaera","octopus","eel","queen","berrier","biologist","pit","worker","harvester","treasurer","philosopher","chorus","transmuter","explorer","collector","scavenger","technician","sifter","skimmer","purifier","heater","spongeFarmer","berrySprayer","glassMaker","silentArchivist","tirelessCrafter","clamCollector","sprongeSmelter","seaScourer","prostheticPolyp","sponge","jellyfish","clam","coral","algae","coralglass","delphinium","spronge","tar","ice"],(a=>{e.resources[a]={amount:0,totalAmount:0}})),_.each(["environmentalism","thermalConditioning","coralglassSmelting","industrialGradeSponge","aquamarineFusion","coralCircuitry","sprongeBiomimicry","dolphinTechnology","spongeCollection","jellyfishHunting","clamScooping","pearlConversion","crustaceanBiology","eusociality","wormWarriors","cetaceanAwareness","dolphinBiology","delphinePhilosophy","coralHalls","eternalSong","eelHabitats","creviceCreches","bioelectricity","chimaeraMysticism","abyssalEnigmas","octopusMethodology","octalEfficiency"],(a=>{e.upgrades[a]=!1})),e.world={type:"start",level:1},e.artifacts={},_.each(["permanentMultiplier","planetTerraformer","gateCostReducer","planetScanner","sharkMigrator","rayMigrator","crabMigrator","shrimpMigrator","lobsterMigrator","dolphinMigrator","whaleMigrator","eelMigrator","chimaeraMigrator","octopusMigrator","sharkTotem","rayTotem","crabTotem","shrimpTotem","lobsterTotem","dolphinTotem","whaleTotem","eelTotem","chimaeraTotem","octopusTotem","progressTotem","carapaceTotem","inspirationTotem","industryTotem","wardingTotem"],(a=>{e.artifacts[a]=0})),e.gateway={betweenRuns:!1},e},function(e){return e=$.extend(!0,e,{settings:{buttonDisplayType:"pile"}})},function(e){return e=$.extend(!0,e,{gateway:{wonGame:!1}})},function(e){return e.resources.numen={amount:0,totalAmount:0},e.gateCostsMet=[!1,!1,!1,!1,!1,!1],e},function(e){return _.each(["eggBrooder","diver"],(a=>{e.resources[a]={amount:0,totalAmount:0}})),_.each(["agriculture","ancestralRecall","utilityCarapace","primordialSong","leviathanHeart","eightfoldOptimisation","mechanisedAlchemy","mobiusShells","imperialDesigns"],(a=>{e.upgrades[a]=!1})),e},function(e){return e=$.extend(!0,e,{completedWorlds:{}}),_.each(["iterativeDesign","superprocessing"],(a=>{e.upgrades[a]=!1})),_.each(["start","marine","chaotic","haven","tempestuous","volcanic","abandoned","shrouded","frigid"],(a=>{e.completedWorlds[a]=!1})),e},function(e){return e=$.extend(!0,e,{settings:{enableThemes:!0,framerate:20}})},function(e){return e=$.extend(!0,e,{settings:{boldCosts:!0}})},function(e){return _.each(["investigator","filter","ancientPart"],(a=>{e.resources[a]={amount:0,totalAmount:0}})),_.each(["farAbandonedExploration","reverseEngineering","highEnergyFusion","artifactAssembly","superiorSearchAlgorithms"],(a=>{e.upgrades[a]=!1})),e},function(e){return e=$.extend(!0,e,{settings:{grottoMode:"simple",incomeTotalMode:"absolute"}})},function(e){return _.each(["historian","crimsonCombine","kelpCultivator"],(a=>{e.resources[a]={amount:0,totalAmount:0}})),_.each(["coralCollection","whaleCommunication","delphineHistory","whaleSong","farHavenExploration","crystallineConstruction"],(a=>{e.upgrades[a]=!1})),e},function(e){_.each(["planetTerraformer","shrimpMigrator","lobsterMigrator","dolphinMigrator","whaleMigrator","eelMigrator","chimaeraMigrator","octopusMigrator","shrimpTotem","lobsterTotem","dolphinTotem","whaleTotem","eelTotem","chimaeraTotem","octopusTotem","carapaceTotem","inspirationTotem","industryTotem"],(a=>{_.has(e.artifacts,a)&&delete e.artifacts[a]})),_.has(e,"gateCostsMet")&&delete e.gateCostsMet,_.has(e.settings,"iconPositions")?(e.settings.showIcons="off"!==e.settings.iconPositions,delete e.settings.iconPositions):e.settings.showIcons=!0,e.settings.minimizedTopbar=!0,_.has(e.resources,"philosopher")&&delete e.resources.philosopher,_.has(e.upgrades,"coralHalls")&&delete e.upgrades.coralHalls,_.each(e.resources,((a,t)=>{[0,null].includes(a.amount)&&[0,null].includes(a.totalAmount)&&delete e.resources[t]})),_.each(e.artifacts,((a,t)=>{0!==a&&null!==a||delete e.artifacts[t]}));const a=[];$.each(e.upgrades,((e,t)=>{!0===t&&a.push(e)})),e.upgrades=a;const t=[];return _.each(e.completedWorlds,((e,a)=>{!0===e&&t.push(a)})),e.completedWorlds=t,e},function(e){return _.has(e,"settings.showTabHelp")&&(_.has(e,"settings.showTooltips")||(e.settings.showTooltips=e.settings.showTabHelp),delete e.settings.showTabHelp),_.has(e,"artifacts")&&delete e.artifacts,_.has(e,"aspects")||(e.aspects={}),e},function(e){return e.settings.colorCosts?e.settings.colorCosts="color":e.settings.colorCosts="none",e.flags={},e.persistentFlags={},e.planetPool=[],e},function(e){return e},function(e){return e.resources.essence&&e.resources.essence.totalAmount>0&&e.aspects.apotheosis&&(e.aspects.pathOfIndustry&&(e.aspects.tokenOfIndustry=e.aspects.pathOfIndustry,e.aspects.pathOfIndustry=0),e.aspects.pathOfEnlightenment&&(e.aspects.pathOfEnlightenment=0,e.aspects.distantForesight=1),e.aspects.pathOfEnlightenment=1),e},function(e){return e.keybinds=SharkGame.Keybinds.defaultBinds,e}]};