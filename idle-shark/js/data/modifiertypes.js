"use strict";SharkGame.ModifierReference=new Map,SharkGame.ModifierTypes={upgrade:{multiplier:{incomeMultiplier:{defaultValue:1,apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return $.each(r,((e,t)=>{r[e]=t*a})),e*a},effectDescription:(e,a,t)=>sharktext.getResourceName(a,void 0,void 0,t)+" speed × "+e,getEffect:(e,a,t,r)=>e,applyToInput:(e,a,t,r,o)=>e*a},resourceBoost:{defaultValue:1,apply:(e,a,t)=>(SharkGame.ResourceMap.forEach((e=>{$.each(e.income,((r,o)=>{r===t&&o>0&&(e.income[r]=o*a)}))})),e*a),effectDescription:(e,a,t)=>"All "+sharktext.getResourceName(a,void 0,void 0,t)+" production × "+e,getEffect:(e,a,t,r)=>a,applyToInput:(e,a,t,r,o)=>e*t},incomeBoost:{defaultValue:1,apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return $.each(r,((e,t)=>{t>0&&"tar"!==e&&(r[e]=t*a)})),e*a},effectDescription:(e,a,t)=>sharktext.getResourceName(a,void 0,void 0,t)+" efficiency × "+e,getEffect:(e,a,t,r)=>SharkGame.ResourceMap.get(t).income[r]>0&&"tar"!==r?e:1,applyToInput:(e,a,t,r,o)=>e*(e>0&&"tar"!==o?a:1)},sandMultiplier:{defaultValue:1,apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return r.sand&&(r.sand=r.sand*a),e*a},effectDescription:(e,a,t)=>sharktext.getResourceName(a,void 0,void 0,t)+" collection of "+sharktext.getResourceName("sand",void 0,void 0,t)+" × "+e,getEffect:(e,a,t,r)=>"sand"===r?e:1,applyToInput:(e,a,t,r,o)=>e*("sand"===o?a:1)},kelpMultiplier:{defaultValue:1,apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return r.kelp&&(r.kelp=r.kelp*a),e*a},effectDescription:(e,a,t)=>sharktext.getResourceName(a,void 0,void 0,t)+" collection of "+sharktext.getResourceName("kelp",void 0,void 0,t)+" × "+e,getEffect:(e,a,t,r)=>"kelp"===r?e:1,applyToInput:(e,a,t,r,o)=>e*("kelp"===o?a:1)},heaterMultiplier:{defaultValue:1,apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return r.ice&&r.ice<0&&(r.ice=r.ice*a),e*a},effectDescription:(e,a,t)=>sharktext.getResourceName(a,!1,2,t)+" melt "+sharktext.getResourceName("ice",void 0,void 0,t)+" "+e+"× faster.",getEffect:(e,a,t,r)=>e,applyToInput:(e,a,t,r,o)=>e*("ice"===o&&e<0?a:1)}},other:{addCoralIncome:{defaultValue:0,apply(e,a,t){SharkGame.ResourceMap.get(t).baseIncome||(SharkGame.ResourceMap.get(t).baseIncome={}),SharkGame.ResourceMap.get(t).income||(SharkGame.ResourceMap.get(t).income={});const r=SharkGame.ResourceMap.get(t).baseIncome;return r.coral=(r.coral?r.coral:0)+a,res.reapplyModifiers(t,"coral"),e+a},effectDescription:(e,a,t)=>`Add ${e} ${sharktext.getResourceName("coral",!1,!1,t)}/s to ${sharktext.getResourceName(a,!1,69,t)}`,getEffect:(e,a,t,r)=>1,applyToInput:(e,a,t,r,o)=>e},addJellyIncome:{defaultValue:0,apply(e,a,t){SharkGame.ResourceMap.get(t).baseIncome||(SharkGame.ResourceMap.get(t).baseIncome={}),SharkGame.ResourceMap.get(t).income||(SharkGame.ResourceMap.get(t).income={});const r=SharkGame.ResourceMap.get(t).baseIncome;return r.jellyfish=(r.jellyfish?r.jellyfish:0)+a,res.reapplyModifiers(t,"jellyfish"),e+a},effectDescription:(e,a,t)=>`Add ${e} ${sharktext.getResourceName("jellyfish",!1,!1,t)}/s to ${sharktext.getResourceName(a,!1,69,t)}`,getEffect:(e,a,t,r)=>1,applyToInput:(e,a,t,r,o)=>e},addFishIncome:{defaultValue:0,apply(e,a,t){SharkGame.ResourceMap.get(t).baseIncome||(SharkGame.ResourceMap.get(t).baseIncome={}),SharkGame.ResourceMap.get(t).income||(SharkGame.ResourceMap.get(t).income={});const r=SharkGame.ResourceMap.get(t).baseIncome;return r.fish=(r.fish?r.fish:0)+a,res.reapplyModifiers(t,"fish"),e+a},effectDescription:(e,a,t)=>`Add ${e} ${sharktext.getResourceName("fish",!1,!1,t)}/s to ${sharktext.getResourceName(a,!1,69,t)}`,getEffect:(e,a,t,r)=>1,applyToInput:(e,a,t,r,o)=>e},addSpongeIncome:{defaultValue:0,apply(e,a,t){SharkGame.ResourceMap.get(t).baseIncome||(SharkGame.ResourceMap.get(t).baseIncome={}),SharkGame.ResourceMap.get(t).income||(SharkGame.ResourceMap.get(t).income={});const r=SharkGame.ResourceMap.get(t).baseIncome;return r.sponge=(r.sponge?r.sponge:0)+a,res.reapplyModifiers(t,"sponge"),e+a},effectDescription:(e,a,t)=>`Add ${e} ${sharktext.getResourceName("sponge",!1,!1,t)}/s to ${sharktext.getResourceName(a,!1,69,t)}`,getEffect:(e,a,t,r)=>1,applyToInput:(e,a,t,r,o)=>e},addAlgaeIncome:{defaultValue:0,apply(e,a,t){SharkGame.ResourceMap.get(t).baseIncome||(SharkGame.ResourceMap.get(t).baseIncome={}),SharkGame.ResourceMap.get(t).income||(SharkGame.ResourceMap.get(t).income={});const r=SharkGame.ResourceMap.get(t).baseIncome;return r.algae=(r.algae?r.algae:0)+a,res.reapplyModifiers(t,"algae"),e+a},effectDescription:(e,a,t)=>`Add ${e} ${sharktext.getResourceName("algae",!1,!1,t)}/s to ${sharktext.getResourceName(a,!1,69,t)}`,getEffect:(e,a,t,r)=>1,applyToInput:(e,a,t,r,o)=>e},addSandIncome:{defaultValue:0,apply(e,a,t){SharkGame.ResourceMap.get(t).baseIncome||(SharkGame.ResourceMap.get(t).baseIncome={}),SharkGame.ResourceMap.get(t).income||(SharkGame.ResourceMap.get(t).income={});const r=SharkGame.ResourceMap.get(t).baseIncome;return r.sand=(r.sand?r.sand:0)+a,res.reapplyModifiers(t,"sand"),e+a},effectDescription:(e,a,t)=>`Add ${e} ${sharktext.getResourceName("sand",!1,!1,t)}/s to ${sharktext.getResourceName(a,!1,69,t)}`,getEffect:(e,a,t,r)=>1,applyToInput:(e,a,t,r,o)=>e}}},world:{multiplier:{planetaryIncomeMultiplier:{defaultValue:1,name:"Planetary Income Multiplier",apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return $.each(r,((e,t)=>{r[e]=t*(1+a)})),e*(1+a)},effectDescription:(e,a,t)=>"Income from "+sharktext.getResourceName(a,!1,2,t)+" ×"+(1+e).toFixed(2),getEffect:(e,a,t,r)=>e,applyToInput:(e,a,t,r,o)=>e*a},planetaryIncomeReciprocalMultiplier:{defaultValue:1,name:"Planetary Income Reciprocal Multiplier",apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return $.each(r,((e,t)=>{r[e]=t*(1/(1+a))})),e*(1/(1+a))},effectDescription:(e,a,t)=>"Income from "+sharktext.getResourceName(a,!1,2,t)+" ×"+(1/(1+e)).toFixed(2),getEffect:(e,a,t,r)=>e,applyToInput:(e,a,t,r,o)=>e*a},planetaryResourceBoost:{defaultValue:1,name:"Planetary Boost",apply:(e,a,t)=>(SharkGame.ResourceMap.forEach((e=>{$.each(e.income,((r,o)=>{r===t&&o>0&&(e.income[r]=o*(1+a))}))})),e*(1+a)),effectDescription:(e,a,t)=>"All "+sharktext.getResourceName(a,!1,2,t)+" production ×"+(1+e).toFixed(2),getEffect:(e,a,t,r)=>a,applyToInput:(e,a,t,r,o)=>e*t},planetaryResourceReciprocalBoost:{defaultValue:1,name:"Planetary Reciprocal Boost",apply:(e,a,t)=>(SharkGame.ResourceMap.forEach((e=>{$.each(e.income,((r,o)=>{r===t&&o>0&&(e.income[r]=o*(1/(1+a)))}))})),e*(1/(1+a))),effectDescription:(e,a,t)=>"All "+sharktext.getResourceName(a,!1,2,t)+" production ×"+(1/(1+e)).toFixed(2),getEffect:(e,a,t,r)=>a,applyToInput:(e,a,t,r,o)=>e*t},planetaryFishMultiplier:{defaultValue:1,apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return r.fish&&(r.fish=r.fish*a),e*a},effectDescription:(e,a,t)=>sharktext.getResourceName(a,void 0,void 0,t)+" collection of "+sharktext.getResourceName("fish",void 0,void 0,t)+" × "+e,getEffect:(e,a,t)=>e,applyToInput:(e,a,t,r,o)=>e*("fish"===o?a:1)}},other:{planetaryIncome:{defaultValue:0,name:"Income per Climate Level",apply(e,a,t){SharkGame.ResourceMap.get("world").baseIncome||(SharkGame.ResourceMap.get("world").baseIncome={},SharkGame.ResourceMap.get("world").income={});const r=SharkGame.ResourceMap.get("world").baseIncome;return r[t]=(r[t]?r[t]:0)+a,res.reapplyModifiers("world",t),e+a},effectDescription:(e,a,t)=>"Gain "+sharktext.beautify(e)+" "+sharktext.getResourceName(a,!1,e,t)+" per second",applyToInput:(e,a,t,r,o)=>e},planetaryStartingResources:{defaultValue:0,name:"Planetary Starting Resources",apply:(e,a,t)=>(res.changeResource(t*a),e+a),effectDescription:(e,a,t)=>"Start with "+e+" "+sharktext.getResourceName(a,!1,e,t),applyToInput:(e,a,t,r,o)=>e},planetaryGeneratorRestriction:{defaultValue:[],name:"Restricted Generator-Income Combination",apply:(e,a,t)=>(SharkGame.ResourceMap.get(t).income[a]=0,"object"!=typeof e?[a]:(e.push(a),e)),effectDescription:(e,a,t)=>sharktext.getResourceName(a,!1,2,t)+" cannot produce "+sharktext.getResourceName(e,!1,2,t),applyToInput:(e,a,t,r,o)=>a.includes(o)?0:e}}},aspect:{multiplier:{pathOfIndustry:{defaultValue:1,apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return $.each(r,((e,t)=>{t>0&&"tar"!==e&&(r[e]=t*a)})),e*a},effectDescription:(e,a,t)=>sharktext.getResourceName(a,void 0,void 0,t)+" efficiency × "+e,getEffect:(e,a,t,r)=>SharkGame.ResourceMap.get(t).income[r]>0&&"tar"!==r?e:1,applyToInput:(e,a,t,r,o)=>e*(e>0&&"tar"!==o?a:1)},constructedConception:{defaultValue:1,apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return $.each(r,((e,t)=>{t>0&&"tar"!==e&&(r[e]=t*2**a)})),e*a},effectDescription:(e,a,t)=>sharktext.getResourceName(a,void 0,void 0,t)+" efficiency × "+e,getEffect:(e,a,t,r)=>SharkGame.ResourceMap.get(t).income[r]>0&&"tar"!==r?2**(e-1):1,applyToInput:(e,a,t,r,o)=>e*(e>0&&"tar"!==o?2**(a-1):1)},theTokenForGenerators:{defaultValue:1,apply(e,a,t){const r=SharkGame.ResourceMap.get(t).income;return $.each(r,((e,t)=>{r[e]=t*a})),e*a},effectDescription:(e,a,t)=>sharktext.getResourceName(a,void 0,void 0,t)+" speed × "+e,getEffect:(e,a,t,r)=>SharkGame.ResourceMap.get(t).income[r]>0&&"tar"!==r?e:1,applyToInput:(e,a,t,r,o)=>e*a},theTokenForResources:{defaultValue:1,apply:(e,a,t)=>(SharkGame.ResourceMap.forEach((e=>{$.each(e.income,((r,o)=>{r===t&&o>0&&(e.income[r]=o*a)}))})),e*a),effectDescription:(e,a,t)=>"All "+sharktext.getResourceName(a,void 0,void 0,t)+" production × "+e,getEffect:(e,a,t,r)=>SharkGame.ResourceMap.get(t).income[r]>0&&"tar"!==r?a:1,applyToInput:(e,a,t,r,o)=>e>0?e*t:e}},other:{clawSharpening:{defaultValue:0,apply:(e,a,t)=>(SharkGame.ResourceMap.get(t).baseIncome.fish=.1*2**(a-1),res.reapplyModifiers(t,"fish"),a),getEffect:(e,a,t,r)=>1,applyToInput:(e,a,t,r,o)=>e}}}};